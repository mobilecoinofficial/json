[package]
name = "serde_json"
version = "1.0.40" # remember to update html_root_url
authors = ["Erick Tryzelaar <erick.tryzelaar@gmail.com>", "David Tolnay <dtolnay@gmail.com>"]
license = "MIT OR Apache-2.0"
description = "A JSON serialization file format"
repository = "https://github.com/serde-rs/json"
documentation = "http://docs.serde.rs/serde_json/"
keywords = ["json", "serde", "serialization"]
categories = ["encoding"]
readme = "README.md"
include = ["Cargo.toml", "src/**/*.rs", "README.md", "LICENSE-APACHE", "LICENSE-MIT"]

[badges]
travis-ci = { repository = "serde-rs/json" }
appveyor = { repository = "serde-rs/json" }

[dependencies]
serde = { version = "1.0.60", default-features = false }
indexmap = { version = "1.0", optional = true }
itoa = "0.4.3"
ryu = "1.0"

[dev-dependencies]
automod = "0.1"
rustversion = "0.1"
serde_bytes = "0.11"
serde_derive = "1.0"
serde_stacker = "0.1"
trybuild = "1.0"

[package.metadata.docs.rs]
features = ["raw_value", "unbounded_depth"]

[package.metadata.playground]
features = ["raw_value"]


### FEATURES #################################################################

[features]
default = ["std"]

# Pass std flag to serde. This is the default.

# Pass alloc flag to serde. (Counter-intuitively, *we* still use std even if this flag is on)
#
# The insight here is that mobilecoin only depends on serde_json in std targets, but it
# wants to build with `serde/alloc` everywhere in all configurations. It turns out that
# `serde_json` in std mode will build fine against `serde/alloc`. This is because
# `serde/alloc` has a strictly less-restrictive trait bound for errors, and `serde_json` doesn't
# actually use `std::collections::HashMap` it uses `std::collections::Btree` which `serde/alloc`
# has support for, since that became part of `alloc::collections`.
#
# IF serde/alloc and serde/std were compatible, we could simply change the dependency
# in this Cargo.toml to always use `serde/alloc` and we wouldn't need any std or alloc
# features in this crate. Unfortunately that isn't the case. So the only thing
# we actually need the flags for in this crate is to be able to pass them on to serde.
#
# In a future revision, we might try to make this crate *actually* a no_std crate,
# but that isn't a development goal for mobilecoin at this time. The main difficulty
# is that we must replace `std::io::Read, std::io::Write, std::io::Error, std::io::Result`
# in a sane way. The only way to do that is what we also do in our fork of rmp, which
# is use a `no_std` shim that provides core-compatible versions of these. We can do this
# but it's unlikely to get accepted upstream as a patch. Since we don't actually need
# this functionality (we use rjson in the enclave and it doesn't use serde), the only
# purpose of implementing it would be to create something that would be accepted upstream.
#
# Actually, it's possible that this patch *would* be accepted to developers upstream --
# possibly if we called the features `serde_std` and `serde_alloc` they would accept
# that it's useful to have `serde_json` able to be used in a project without forcing `serde_std`,
# since that has project-wide consequences.
std = ["serde/std"]
alloc = ["serde/alloc"]

# Use a different representation for the map type of serde_json::Value.
# This allows data to be read into a Value and written back to a JSON string
# while preserving the order of map keys in the input.
preserve_order = ["indexmap"]

# Use an arbitrary precision number representation for serde_json::Number. This
# allows JSON numbers of arbitrary size/precision to be read into a Number and
# written back to a JSON string without loss of precision.
arbitrary_precision = []

# Provide a RawValue type that can hold unprocessed JSON during deserialization.
raw_value = []

# Provide a method disable_recursion_limit to parse arbitrarily deep JSON
# structures without any consideration for overflowing the stack. When using
# this feature, you will want to provide some other way to protect against stack
# overflows, such as by wrapping your Deserializer in the dynamically growing
# stack adapter provided by the serde_stacker crate. Additionally you will need
# to be careful around other recursive operations on the parsed result which may
# overflow the stack after deserialization has completed, including, but not
# limited to, Display and Debug and Drop impls.
unbounded_depth = []
